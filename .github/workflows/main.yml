name: Timblo Back-office Backend 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_ID: timblo-bo-be

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
        pnpm-version: [10]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Teams Notification 
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: https://alibizgroup.webhook.office.com/webhookb2/53d32900-0c0e-4656-81ba-661e48dfcda2@3a9623b8-163c-46b9-87ab-68863012ec5a/IncomingWebhook/92314ea918a24733ab15a006874dc3ba/a58be90e-1de5-421d-bc1b-72ebbe1042fe/V2RdW7uabq8nWazNR3qHdCxrQJzh-GjLLpm2GJrAJD6o01
          title: "ÎÇòÎäî Î∞∞Ìè¨ÏöîÏ†ï!"
          text: |
            <div style="color:#000;background-color:${{ job.status == 'success' && '#E8F5E9' || '#FFEBEE' }};padding:1.5rem;border-radius:.4rem">
              <h2>${{ job.status == 'success' && '‚úÖ ÎπåÎìú ÏÑ±Í≥µ' || '‚ùå ÎπåÎìú Ïã§Ìå®' }}</h2>
              <p>${{ github.repository }}</p>
              <div style="background-color:#fff;padding:1rem;border-radius:.4rem;margin:1rem 0">
                <p>üí¨ ${{ github.event.head_commit.message }}</p>
                <p style="font-style:italic;margin:1rem 0">- ${{ github.event.head_commit.author.name }}</p>
              </div>
              <p>üîç <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î≥¥Í∏∞</a></p>
            </div>
          theme_color: ${{ job.status == 'success' && '00FF00' || 'FF0000' }}


      # - name: Install dependencies
      #  run: pnpm install --frozen-lockfile

  # wait-for-approval:
  #   needs: verify
  #   runs-on: ubuntu-latest
  #   environment: 'dev'
  #   steps:
  #     - name: Waiting for approval
  #       run: echo "Approved by us"

  build:
    needs: verify
    runs-on: ubuntu-latest
    environment: 'dev'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Test
        run: |
          echo "DB_TYPE=${{ env.DB_DATATYPE }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOSTNAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_HOSTPORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "MONGO_DATABASE=${{ vars.MONGO_DATABASE }}" >> .env

          echo "DB_DATABASE=${{ vars.DB_DATABASE }}"
          echo "MONGO_URI=${{ secrets.MONGO_URI }}"
          

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: [build]
    runs-on: self-hosted
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Pull latest image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
      - name: Stop existing container
        run: |
          IS_HEALTHY=$(docker inspect --format='{{.State.Health.Status}}' ${{ env.PROJECT_ID }})

          echo "Service is... ${IS_HEALTHY}"
          docker rm -f ${{ env.PROJECT_ID }} || true
        continue-on-error: true

      - name: Run container
        run: |
          docker run -d --name ${{ env.PROJECT_ID }} -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          